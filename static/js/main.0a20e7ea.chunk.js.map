{"version":3,"sources":["components/ProblemTab/index.js","actions/types.js","actions/index.js","components/CodeEditor/CodeEditor.js","components/TestCasesTab/CodePanel.js","components/TestCasesTab/ResultPanel.js","components/styles.js","components/TestCasesTab/Logs.js","components/TestCasesTab/index.js","components/App.js","reducer/index.js","index.js"],"names":["ProblemTab","Container","Typography","color","variant","List","dense","ListItem","ListItemIcon","Box","fontStyle","gutterBottom","Button","href","target","style","textTransform","borderColor","fontWeight","fontSize","lineHeight","px","pt","pb","border","borderRadius","width","display","CREATE_ATTEMPTS","baseUrl","generateTestCases","dispatch","a","axios","get","res","type","payload","data","resetState","createAttempts","code","testCaseTypes","apiEndpoint","i","length","post","console","log","fetchResults","attemptId","testCases","map","index","testCaseId","put","newTest","verdict","CodeEditor","setSourceCode","readCodeOnly","placeholder","height","mode","theme","name","readOnly","showPrintMargin","onChange","showGutter","highlightActiveLine","value","setOptions","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","showLineNumbers","tabSize","useStyles","makeStyles","container","flexWrap","justifyContent","marginTop","connect","actions","classes","React","useState","shortestPathOnly","bothShortestAndSecondShortestPath","edgeCase","checkBoxValues","setCheckBoxValues","sourceCode","handleChange","event","checked","isEnoughTestCase","filter","v","inputEl","useRef","showFile","e","preventDefault","reader","FileReader","onload","text","result","files","readAsText","Fragment","flexChild","margin","Paper","elevation","FormGroup","required","FormLabel","component","error","FormControlLabel","control","Checkbox","label","className","ref","htmlFor","onClick","current","click","disabled","key","push","LinearProgressWithLabel","props","alignItems","mr","LinearProgress","minWidth","Math","round","testTypeDescription","getHoverColor","lighten","root","backgroundColor","palette","info","main","cursor","testDetails","setSelectedTest","dataColumns","field","sortable","headerName","headerClassName","renderCell","row","textDecoration","useEffect","progress","Grid","item","xs","loading","rowHeight","headerHeight","columns","rows","size","id","Size","Verdict","getRowClassName","params","getValue","onRowSelected","boxStyles","box","padding","marginBottom","maxHeight","whiteSpace","test","testDetail","setTestDetail","getTestDetail","detail","testCase","spacing","CircularProgress","overflow","input","stdout","expectedOutput","mapDispatchToProps","generateTests","file","selectedTest","TabPanel","children","other","role","hidden","aria-labelledby","p","a11yProps","setValue","Helmet","charSet","AppBar","position","Tabs","newValue","centered","Tab","intialState","store","createStore","state","action","newState","newState1","pendingTests","applyMiddleware","thunk","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.0a20e7ea.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport { List, ListItem, ListItemIcon, ListItemText } from \"@material-ui/core\";\r\nimport ChevronRightIcon from \"@material-ui/icons/ChevronRight\";\r\nconst ProblemTab = () => {\r\n  return (\r\n    <div>\r\n      <Container>\r\n        <Typography color=\"textPrimary\" variant=\"h6\">\r\n          Problem\r\n        </Typography>{\" \"}\r\n        This assignment involves extension to the single source-single\r\n        destination shortest path problem. <br></br>\r\n        The input is constructed as follows\r\n        <List dense=\"true\">\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">\r\n              Two integers: nVertices and nEdges, the number of vertices and\r\n              edges in the graph.\r\n            </Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">\r\n              nVertices triples consisting of the label and the x‐ and\r\n              y‐coordinates of each vertex. (An int followed by two doubles)\r\n            </Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>\r\n            <Box fontStyle=\"italic\">\r\n              nEdges triples consisting of the labels of the start and end\r\n              vertices of each edge, along with its weight. Note: the weight\r\n              associated with an edge will be greater than or equal to the\r\n              Euclidean distance between its start and end vertices as\r\n              determined by their coordinates. (Two ints followed by a double)\r\n            </Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>\r\n            <Box fontStyle=\"italic\">\r\n              Two labels, the indicating the start and goal vertices for which\r\n              the paths are required. (Two ints)\r\n            </Box>\r\n          </ListItem>\r\n        </List>\r\n        Your C++ program should:\r\n        <List dense=\"true\">\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">\r\n              Read an undirected graph from the input to <b>stdin</b>.\r\n            </Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">\r\n              Find the shortest path between the start and goal vertices\r\n              specified in the file.\r\n            </Box>{\" \"}\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">\r\n              Print out the vertices on the path, in order from start to goal.\r\n            </Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">Print out the length of this path.</Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">\r\n              Find the second shortest path between the start and goal vertices\r\n              specified in the input.\r\n            </Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">\r\n              Print out the vertices on the path, in order from start to goal.\r\n            </Box>\r\n          </ListItem>\r\n          <ListItem>\r\n            <ListItemIcon>\r\n              <ChevronRightIcon />\r\n            </ListItemIcon>{\" \"}\r\n            <Box fontStyle=\"italic\">Print out the length of this path. </Box>\r\n          </ListItem>\r\n        </List>\r\n      </Container>\r\n      <Container>\r\n        <Box>\r\n          <Typography color=\"textPrimary\" variant=\"h6\" gutterBottom={true}>\r\n            Sample test case input\r\n          </Typography>{\" \"}\r\n          <Button\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            href={\r\n              \"https://storage.googleapis.com/test-case-generator/sample_input.txt\"\r\n            }\r\n            target=\"_blank\"\r\n            style={{ textTransform: \"lowercase\" }}\r\n          >\r\n            sample_test_case_input.txt\r\n          </Button>\r\n        </Box>\r\n        <Box>\r\n          <Typography color=\"textPrimary\" variant=\"h6\" gutterBottom={true}>\r\n            Sample test case output\r\n          </Typography>\r\n          <Box\r\n            style={{\r\n              borderColor: \"rgba(63, 81, 181, 0.5)\",\r\n              color: \"#3f51b5\",\r\n              fontWeight: \"500\",\r\n              fontSize: \"0.875rem\",\r\n              lineHeight: 1.75,\r\n            }}\r\n            px={2}\r\n            pt={1}\r\n            pb={1}\r\n            border={0.1}\r\n            borderRadius={3}\r\n            width={1 / 3}\r\n          >\r\n            <Typography\r\n              display=\"block\"\r\n              color=\"primary\"\r\n              variant=\"p\"\r\n              gutterBottom={true}\r\n            >\r\n              Shortest path from 2 to 13:\r\n            </Typography>\r\n            <Typography\r\n              display=\"block\"\r\n              color=\"primary\"\r\n              variant=\"p\"\r\n              gutterBottom={true}\r\n            >\r\n              Vertices of path: 2--&gt;13{\" \"}\r\n            </Typography>\r\n            <Typography\r\n              display=\"block\"\r\n              color=\"primary\"\r\n              variant=\"p\"\r\n              gutterBottom={true}\r\n            >\r\n              Length of path: 85{\" \"}\r\n            </Typography>\r\n            <Typography\r\n              display=\"block\"\r\n              color=\"primary\"\r\n              variant=\"p\"\r\n              gutterBottom={true}\r\n            >\r\n              <br></br>\r\n              Second shortest path from 2 to 13:\r\n            </Typography>\r\n\r\n            <Typography\r\n              display=\"block\"\r\n              color=\"primary\"\r\n              variant=\"p\"\r\n              gutterBottom={true}\r\n            >\r\n              Vertices of path: 2--&gt;17--&gt;20--&gt;13{\" \"}\r\n            </Typography>\r\n            <Typography\r\n              display=\"block\"\r\n              color=\"primary\"\r\n              variant=\"p\"\r\n              gutterBottom={true}\r\n            >\r\n              Length of path: 134{\" \"}\r\n            </Typography>\r\n          </Box>\r\n        </Box>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProblemTab;\r\n","export const GENERATE_TESTS = 'GENERATE_TESTS';\r\nexport const CREATE_ATTEMPTS = 'CREATE_ATTEMPTS';\r\nexport const FETCH_RESULTS = 'FETCH_RESULTS';\r\nexport const FETCH_TEST_DETAIL = 'FETCH_TEST_DETAIL';\r\nexport const RESET_STATE = 'RESET_STATE';","import axios from \"axios\";\r\nimport {\r\n  GENERATE_TESTS,\r\n  CREATE_ATTEMPTS,\r\n  FETCH_RESULTS,\r\n  FETCH_TEST_DETAIL,\r\n  RESET_STATE,\r\n} from \"./types\";\r\n\r\nconst baseUrl = \"http://34.70.3.255:9090\";\r\n\r\nexport const generateTestCases = () => async (dispatch) => {\r\n  const res = await axios.get(`${baseUrl}/testCases`);\r\n  dispatch({ type: GENERATE_TESTS, payload: res.data });\r\n};\r\n\r\nexport const resetState = () => (dispatch) => {\r\n  dispatch({ type: RESET_STATE, payload: null });\r\n};\r\n\r\nexport const createAttempts = (code, testCaseTypes) => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: CREATE_ATTEMPTS, payload: null });\r\n    var apiEndpoint = `${baseUrl}/attempts?testCaseTypes=`;\r\n    for (var i = 0; i < testCaseTypes.length; i++) {\r\n      apiEndpoint += testCaseTypes[i];\r\n      apiEndpoint += i < testCaseTypes.length - 1 ? \",\" : \"\";\r\n    }\r\n    const res = await axios.post(apiEndpoint, { code });\r\n    dispatch({ type: CREATE_ATTEMPTS, payload: res.data });\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n};\r\n\r\nexport const fetchResults =\r\n  ({ attemptId, testCases }) =>\r\n  async (dispatch) => {\r\n    try {\r\n      const testResults = await testCases.map(async ({ testCaseId }, index) => {\r\n        const newTest = await axios.put(\r\n          `${baseUrl}/attempts/${attemptId}/${testCaseId}`\r\n        );\r\n        dispatch({\r\n          type: FETCH_RESULTS,\r\n          payload: {\r\n            index,\r\n            testCaseId: newTest.data.testCaseId,\r\n            verdict: newTest.data.verdict,\r\n          },\r\n        });\r\n        const res = await axios.get(\r\n          `${baseUrl}/attempts/${attemptId}/${testCaseId}`\r\n        );\r\n        dispatch({ type: FETCH_TEST_DETAIL, payload: res.data });\r\n        return newTest.data;\r\n      });\r\n    } catch (e) {\r\n      console.log(e);\r\n    }\r\n  };\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/src-noconflict/mode-c_cpp\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\n\r\nconst CodeEditor = ({ code, setSourceCode, readCodeOnly }) => {\r\n  return (\r\n    <AceEditor\r\n      placeholder=\"Enter your code here\"\r\n      height=\"360px\"\r\n      width=\"500px\"\r\n      mode=\"c_cpp\"\r\n      theme=\"monokai\"\r\n      name=\"blah2\"\r\n      readOnly={readCodeOnly}\r\n      fontSize={14}\r\n      showPrintMargin={false}\r\n      onChange={setSourceCode}\r\n      showGutter={true}\r\n      highlightActiveLine={true}\r\n      value={code}\r\n      setOptions={{\r\n        enableBasicAutocompletion: true,\r\n        enableLiveAutocompletion: true,\r\n        enableSnippets: true,\r\n        showLineNumbers: true,\r\n        tabSize: 2,\r\n      }}\r\n    />\r\n  );\r\n};\r\nexport default CodeEditor;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport * as actions from \"../../actions\";\r\nimport CodeEditor from \"../CodeEditor/CodeEditor\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { FormGroup } from \"@material-ui/core\";\r\nimport { shadows } from \"@material-ui/system\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-between\",\r\n    marginTop: \"20px\",\r\n  },\r\n}));\r\n\r\nconst CodePanel = ({ createAttempts, readCodeOnly }) => {\r\n  const classes = useStyles();\r\n  const initCode =\r\n    '#include <iostream>\\nusing namespace std;\\nint main(){\\n\\tcout<< \"Hello World\";\\n\\treturn 0; \\n}';\r\n  const [checkBoxValues, setCheckBoxValues] = React.useState({\r\n    shortestPathOnly: false,\r\n    bothShortestAndSecondShortestPath: false,\r\n    edgeCase: false,\r\n  });\r\n  const [sourceCode, setSourceCode] = React.useState(initCode);\r\n  const handleChange = (event) => {\r\n    setCheckBoxValues({\r\n      ...checkBoxValues,\r\n      [event.target.value]: event.target.checked,\r\n    });\r\n  };\r\n  const { shortestPathOnly, bothShortestAndSecondShortestPath, edgeCase } =\r\n    checkBoxValues;\r\n\r\n  const isEnoughTestCase =\r\n    [shortestPathOnly, bothShortestAndSecondShortestPath, edgeCase].filter(\r\n      (v) => v\r\n    ).length > 0;\r\n\r\n  const inputEl = React.useRef(null);\r\n\r\n  const onButtonClick = () => {\r\n    inputEl.current.click();\r\n  };\r\n\r\n  const showFile = async (e) => {\r\n    e.preventDefault();\r\n    const reader = new FileReader();\r\n    reader.onload = async (e) => {\r\n      const text = e.target.result;\r\n      setSourceCode(text);\r\n    };\r\n    if (e.target.files) {\r\n      if (e.target.files[0]) {\r\n        reader.readAsText(e.target.files[0]);\r\n      }\r\n    }\r\n  };\r\n\r\n  const submitCode = () => {\r\n    if (readCodeOnly) {\r\n    } else {\r\n      var testCaseTypes = [];\r\n      for (var key in checkBoxValues) {\r\n        if (checkBoxValues[key]) testCaseTypes.push(key);\r\n      }\r\n      createAttempts(sourceCode, testCaseTypes);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <div style={{ display: \"flex\" }}>\r\n        <div style={{ flexChild: 1, margin: 5 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Code editor\r\n          </Typography>\r\n          <Paper>\r\n            <CodeEditor\r\n              code={sourceCode}\r\n              setSourceCode={setSourceCode}\r\n              readCodeOnly={readCodeOnly}\r\n            />\r\n          </Paper>\r\n        </div>\r\n        <div style={{ flexChild: 1, margin: 5 }}>\r\n          <Typography variant=\"h6\" gutterBottom>\r\n            Test Options\r\n          </Typography>\r\n          <Paper elevation={false}>\r\n            <FormGroup required>\r\n              <FormLabel component=\"legend\" error={!isEnoughTestCase}>\r\n                Choose at least one*\r\n              </FormLabel>\r\n\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={shortestPathOnly}\r\n                    onChange={handleChange}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Shortest Path Only\"\r\n                value=\"shortestPathOnly\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={bothShortestAndSecondShortestPath}\r\n                    onChange={handleChange}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                value=\"bothShortestAndSecondShortestPath\"\r\n                label=\"Both Shortest And Second Shortest Path\"\r\n              />\r\n              <FormControlLabel\r\n                control={\r\n                  <Checkbox\r\n                    checked={edgeCase}\r\n                    onChange={handleChange}\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Edge Case\"\r\n                value=\"edgeCase\"\r\n              />\r\n            </FormGroup>\r\n          </Paper>\r\n        </div>\r\n      </div>\r\n\r\n      <Container className={classes.container}>\r\n        <input\r\n          style={{ display: \"none\" }}\r\n          ref={inputEl}\r\n          type=\"file\"\r\n          onChange={(e) => showFile(e)}\r\n        />\r\n        <label htmlFor=\"outlined-button-file\">\r\n          <Button variant=\"contained\" onClick={() => onButtonClick()}>\r\n            Upload file\r\n          </Button>\r\n        </label>\r\n\r\n        <Button\r\n          disabled={\r\n            !(isEnoughTestCase && sourceCode.length > 0) || readCodeOnly\r\n          }\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          onClick={submitCode}\r\n        >\r\n          Run tests\r\n        </Button>\r\n      </Container>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(null, actions)(CodePanel);\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport * as actions from \"../../actions\";\r\nimport { DataGrid } from \"@material-ui/data-grid\";\r\nimport {\r\n  Box,\r\n  Button,\r\n  CircularProgress,\r\n  LinearProgress,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport { makeStyles, lighten } from \"@material-ui/core/styles\";\r\n\r\nconst LinearProgressWithLabel = (props) => {\r\n  return (\r\n    <Box display=\"flex\" alignItems=\"center\" style={{ marginTop: \"9px\" }}>\r\n      <Box width=\"100%\" mr={1}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box minWidth={35}>\r\n        <Typography variant=\"body2\" color=\"textSecondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\n\r\nconst testTypeDescription = {\r\n  bothShortestAndSecondShortestPath: \"Both Shortest And Second Shortest Path\",\r\n  edgeCase: \"Edge Case\",\r\n  shortestPathOnly: \"Shortest Path Only\",\r\n};\r\n\r\nconst useStyles = makeStyles((theme) => {\r\n  const getColor = (color) => color;\r\n\r\n  const getHoverColor = (color) => lighten(color, 0.5);\r\n\r\n  return {\r\n    root: {\r\n      \"& .test-details--header\": {\r\n        backgroundColor: \"rgba(0, 0, 0, 0)\",\r\n      },\r\n      \"& .row-theme--Running\": {\r\n        color: getColor(theme.palette.info.main),\r\n        \"&:hover\": {\r\n          color: getHoverColor(theme.palette.info.main),\r\n          cursor: \"auto\",\r\n        },\r\n      },\r\n      \"& .row-theme--Passed\": {\r\n        color: getColor(\"#008450\"),\r\n        \"&:hover\": {\r\n          color: getHoverColor(\"#008450\"),\r\n          cursor: \"auto\",\r\n        },\r\n      },\r\n      \"& .row-theme--Failed\": {\r\n        color: getColor(\"#B81D13\"),\r\n        \"&:hover\": {\r\n          color: getHoverColor(\"#B81D13\"),\r\n          cursor: \"auto\",\r\n        },\r\n      },\r\n    },\r\n  };\r\n});\r\n\r\nconst ResultPanel = ({\r\n  testCases,\r\n  attemptId,\r\n  fetchResults,\r\n  testDetails,\r\n  setSelectedTest,\r\n  readCodeOnly,\r\n}) => {\r\n\r\n  const dataColumns = [\r\n    { field: \"No.\", width: 75, sortable: false },\r\n    { field: \"Test Type\", width: 250 },\r\n    { field: \"Size\", width: 125, headerName: \"Input Size\" },\r\n    {\r\n      field: \"Verdict\",\r\n      headerName: \"Verdict\",\r\n      headerClassName: \"test-details--header\",\r\n      width: 100,\r\n    },\r\n    {\r\n      field: \"\",\r\n      headerName: \"Details\",\r\n      headerClassName: \"test-details--header\",\r\n      width: 100,\r\n      sortable: false,\r\n      renderCell: (data) => (\r\n        <p\r\n          onClick={() => {\r\n            setSelectedTest(data.row);\r\n          }}\r\n          style={{ textDecoration: \"underline\", cursor: \"pointer\" }}\r\n        >\r\n          Details\r\n        </p>\r\n      ),\r\n    },\r\n  ]\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    if (attemptId && testDetails.length == 0) {\r\n      fetchResults({ attemptId, testCases });\r\n    }\r\n  }, [attemptId]);\r\n\r\n  const progress = testCases\r\n    ? (testCases.filter((e) => e.verdict != \"Running\").length * 100) /\r\n      testCases.length\r\n    : 0;\r\n  return (\r\n    <React.Fragment>\r\n      <Grid item xs>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Test Cases\r\n        </Typography>\r\n        <div style={{ height: 350, width: \"100%\" }} className={classes.root}>\r\n          <DataGrid\r\n            loading={readCodeOnly && !testCases}\r\n            rowHeight={25}\r\n            headerHeight={50}\r\n            columns={dataColumns}\r\n            rows={\r\n              testCases\r\n                ? testCases.map(\r\n                    ({ type, size, verdict, testCaseId }, index) => ({\r\n                      \"No.\": index + 1,\r\n                      id: testCaseId,\r\n                      \"Test Type\": testTypeDescription[type],\r\n                      Size: size,\r\n                      Verdict: verdict,\r\n                      \"Test Details\": \"\",\r\n                    })\r\n                  )\r\n                : []\r\n            }\r\n            getRowClassName={(params) =>\r\n              `row-theme--${params.getValue(\"Verdict\")}`\r\n            }\r\n            onRowSelected={(e) => setSelectedTest(e.data)}\r\n          />\r\n        </div>\r\n      </Grid>\r\n      {(readCodeOnly || progress == 100) && (\r\n        <LinearProgressWithLabel value={progress} />\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(null, actions)(ResultPanel);\r\n","import { makeStyles } from '@material-ui/core/styles';\r\n\r\nexport const boxStyles = makeStyles((theme) => ({\r\n    box: {\r\n        border: \"1px solid rgba(63, 81, 181, 0.5)\",\r\n        borderRadius: \"3px\",\r\n        padding: \"10px\",\r\n        marginTop: \"10px\",\r\n        marginBottom: \"10px\",\r\n        color: \"#3f51b5\",\r\n        fontWeight: \"500\",\r\n        fontSize: \"0.875rem\",\r\n        lineHeight: 1.75,\r\n        maxHeight: \"320px\",\r\n        whiteSpace: \"pre-line\"\r\n    },\r\n  }));","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Typography, Box, CircularProgress } from \"@material-ui/core\";\r\nimport { boxStyles } from \"../styles\";\r\n\r\nconst Logs = ({ test, testDetails }) => {\r\n  const classes = boxStyles();\r\n  const [testDetail, setTestDetail] = useState(null);\r\n  useEffect(() => {\r\n    setTestDetail(getTestDetail(test, testDetails));\r\n  }, [testDetails, test]);\r\n\r\n  const getTestDetail = (test, testDetails) => {\r\n    if (test == null) {\r\n      return null;\r\n    }\r\n    if (testDetails == null) {\r\n      return null;\r\n    }\r\n    const detail = testDetails.filter(\r\n      (testCase) => testCase.testCaseId == test.id\r\n    );\r\n    if (detail.length == 0) {\r\n      return null;\r\n    }\r\n    return detail[0];\r\n  };\r\n\r\n  const renderTestDetails = () => {\r\n    return (\r\n      <React.Fragment>\r\n        <Typography variant=\"h6\" gutterBottom>\r\n          Logs\r\n        </Typography>\r\n        <Grid container spacing={3}>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Test Result\r\n            </Typography>\r\n            <Box component=\"span\" display=\"block\" className={classes.box}>\r\n              {testDetail == null ? (\r\n                <CircularProgress size={15} />\r\n              ) : (\r\n                testDetail.verdict\r\n              )}\r\n            </Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Input\r\n            </Typography>\r\n            <Box display=\"block\" overflow=\"auto\" className={classes.box}>\r\n              {testDetail == null ? (\r\n                <CircularProgress size={15} />\r\n              ) : (\r\n                testDetail.input\r\n              )}\r\n            </Box>\r\n          </Grid>\r\n          <Grid item xs={6}>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Output\r\n            </Typography>\r\n            <Box display=\"block\" overflow=\"auto\" className={classes.box}>\r\n              {testDetail == null ? (\r\n                <CircularProgress size={15} />\r\n              ) : (\r\n                testDetail.stdout\r\n              )}\r\n            </Box>\r\n            <Typography variant=\"subtitle1\" gutterBottom>\r\n              Expected Output\r\n            </Typography>\r\n            <Box display=\"block\" overflow=\"visible\" className={classes.box}>\r\n              {testDetail == null ? (\r\n                <CircularProgress size={15} />\r\n              ) : (\r\n                testDetail.expectedOutput\r\n              )}\r\n            </Box>\r\n          </Grid>\r\n        </Grid>\r\n      </React.Fragment>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>{test ? renderTestDetails() : <div></div>}</React.Fragment>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = ({ testDetails }) => ({\r\n  testDetails,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(Logs);\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { generateTestCases } from \"../../actions\";\r\nimport CodePanel from \"./CodePanel\";\r\nimport ResultPanel from \"./ResultPanel\";\r\nimport Logs from \"./Logs\";\r\n\r\nconst TestCasesTab = ({ testCases, attemptId, testDetails, readCodeOnly }) => {\r\n  const [selectedTest, setSelectedTest] = useState(null);\r\n  return (\r\n    <Grid container spacing={3}>\r\n      <Grid item xs={6}>\r\n        <ResultPanel\r\n          attemptId={attemptId}\r\n          testCases={testCases}\r\n          testDetails={testDetails}\r\n          setSelectedTest={setSelectedTest}\r\n          readCodeOnly={readCodeOnly}\r\n        />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <CodePanel readCodeOnly={readCodeOnly} />\r\n      </Grid>\r\n      <Grid item xs={12}>\r\n        <Logs test={selectedTest} />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  generateTests: generateTestCases,\r\n};\r\n\r\nconst mapStateToProps = ({\r\n  file,\r\n  testCases,\r\n  attemptId,\r\n  readCodeOnly,\r\n  testDetails,\r\n}) => ({\r\n  file,\r\n  testCases,\r\n  attemptId,\r\n  testDetails,\r\n  readCodeOnly,\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TestCasesTab);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\n\r\nimport ProblemTab from \"./ProblemTab\";\r\nimport TestCasesTab from \"./TestCasesTab\";\r\nimport * as actions from \"../actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`wrapped-tabpanel-${index}`}\r\n      aria-labelledby={`wrapped-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={2}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst App = () => {\r\n  const [value, setValue] = React.useState(1);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet>\r\n        <meta charSet=\"utf-8\" />\r\n        <title>Automated Test Tool</title>\r\n      </Helmet>\r\n      <Typography variant=\"h4\" style={{ padding: \"10px\" }} color=\"primary\">\r\n        Automated Test Tool\r\n      </Typography>\r\n      <AppBar position=\"static\">\r\n        <Tabs value={value} onChange={handleChange} centered>\r\n          <Tab label=\"Problem\" {...a11yProps(0)} />\r\n          <Tab label=\"Test\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <ProblemTab />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <TestCasesTab />\r\n      </TabPanel>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default connect(null, actions)(App);\r\n","const intialState = {\r\n  testCases: null,\r\n  attemptId: null,\r\n  testDetails: [],\r\n  readCodeOnly: false,\r\n};\r\n\r\nexport default function testReducer(state = intialState, action) {\r\n  // The reducer normally looks at the action type field to decide what happens\r\n  switch (action.type) {\r\n    case \"RESET_STATE\":\r\n      return intialState;\r\n    case \"GENERATE_TESTS\":\r\n      // Do something here based on the different types of actions\r\n      return state;\r\n    case \"CREATE_ATTEMPTS\":\r\n      if (!action.payload) {\r\n        const newState = {\r\n          readCodeOnly: true,\r\n        };\r\n        return newState;\r\n      } else {\r\n        const { testCases, attemptId } = action.payload;\r\n        const newState = {\r\n          ...state,\r\n          attemptId,\r\n          testCases,\r\n          testDetails: [],\r\n          readCodeOnly: true,\r\n        };\r\n        return newState;\r\n      }\r\n\r\n    case \"FETCH_RESULTS\":\r\n      const { index, verdict } = action.payload;\r\n      let newState1 = {\r\n        ...state,\r\n        testCases: state.testCases\r\n          ? state.testCases.map((testCase, i) =>\r\n              i == index\r\n                ? {\r\n                    ...testCase,\r\n                    verdict,\r\n                  }\r\n                : testCase\r\n            )\r\n          : [],\r\n      };\r\n      const pendingTests = newState1.testCases.filter(\r\n        (testCase) => testCase.verdict == \"Running\"\r\n      );\r\n      if (pendingTests.length == 0) {\r\n        newState1.readCodeOnly = false;\r\n      } else {\r\n        newState1.readCodeOnly = true;\r\n      }\r\n      return newState1;\r\n    case \"FETCH_TEST_DETAIL\":\r\n      return {\r\n        ...state,\r\n        testDetails: [...state.testDetails, action.payload],\r\n      };\r\n    default:\r\n      // If this reducer doesn't recognize the action type, or doesn't\r\n      // care about this specific action, return the existing state unchanged\r\n      return state;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport App from './components/App';\r\nimport appReducer from './reducer';\r\n\r\nconst store = createStore(appReducer, {}, applyMiddleware(thunk));\r\n\r\n\r\nReactDOM.render(\r\n    <Provider store = {store}>\r\n        <App/>\r\n    </Provider>, \r\n    document.querySelector('#root'));"],"sourceRoot":""}